AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Scaling Lab - Apache web server with dynamic scaling based on CPU load - Fixed for EU-Central-1'

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCIDR:
    Description: CIDR block for the public subnet
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetCIDR:
    Description: CIDR block for the private subnet
    Type: String
    Default: 10.0.2.0/24

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type

  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access (leave empty if not needed)
    Type: String
    Default: ""
    ConstraintDescription: Must be the name of an existing EC2 KeyPair or empty
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI ID


Resources:

  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: AutoScaling-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScaling-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AutoScaling-Public-Subnet

  # Second Public Subnet for ALB redundancy
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AutoScaling-Public-Subnet-2

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AutoScaling-Private-Subnet

  # Second Private Subnet for ASG redundancy
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AutoScaling-Private-Subnet-2

  # NAT Gateway for private subnet internet access
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AutoScaling-NAT-EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: AutoScaling-NAT-Gateway

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AutoScaling-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AutoScaling-Private-RT

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AutoScaling-ALB-SG
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP traffic from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS traffic from internet
      Tags:
        - Key: Name
          Value: AutoScaling-ALB-SecurityGroup

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AutoScaling-WebServer-SG
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow HTTP traffic from ALB
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
          Description: Allow SSH from VPC
      Tags:
        - Key: Name
          Value: AutoScaling-WebServer-SecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AutoScaling-ALB
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: AutoScaling-ALB

  # Target Group with improved health check settings
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AutoScaling-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: AutoScaling-TargetGroup

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Template with improved UserData
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AutoScaling-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Enable detailed logging
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo "Starting user data script at $(date)"
            
            # Function to signal failure and exit
            signal_failure() {
                echo "ERROR: $1"
                # Install aws-cfn-bootstrap if not present for signaling
                if ! command -v cfn-signal &> /dev/null; then
                    echo "Installing aws-cfn-bootstrap for signaling..."
                    dnf install -y aws-cfn-bootstrap || yum install -y aws-cfn-bootstrap
                fi
                /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
                exit 1
            }
            
            # Update system - try dnf first (AL2023), fallback to yum (AL2)
            echo "Updating system packages..."
            if command -v dnf &> /dev/null; then
                dnf update -y || signal_failure "Failed to update system packages with dnf"
                PACKAGE_MANAGER="dnf"
            else
                yum update -y || signal_failure "Failed to update system packages with yum"
                PACKAGE_MANAGER="yum"
            fi
            
            # Install CloudFormation bootstrap tools first
            echo "Installing CloudFormation bootstrap tools..."
            $PACKAGE_MANAGER install -y aws-cfn-bootstrap || signal_failure "Failed to install aws-cfn-bootstrap"
            
            # Install packages
            echo "Installing required packages..."
            $PACKAGE_MANAGER install -y httpd php stress || signal_failure "Failed to install required packages"
            
            # Start and enable httpd
            echo "Starting Apache..."
            systemctl start httpd || signal_failure "Failed to start Apache"
            systemctl enable httpd || signal_failure "Failed to enable Apache"
            
            # Verify httpd is running
            if ! systemctl is-active --quiet httpd; then
                signal_failure "Apache is not running after start"
            fi
            
            # Get instance metadata with retries
            echo "Getting instance metadata..."
            INSTANCE_ID=""
            LOCAL_IP=""
            
            # Retry logic for metadata
            for i in {1..10}; do
                echo "Attempt $i to get instance metadata..."
                INSTANCE_ID=$(curl -s --connect-timeout 5 --max-time 10 http://169.254.169.254/latest/meta-data/instance-id)
                LOCAL_IP=$(curl -s --connect-timeout 5 --max-time 10 http://169.254.169.254/latest/meta-data/local-ipv4)
            
                if [[ -n "$INSTANCE_ID" && -n "$LOCAL_IP" ]]; then
                    echo "Successfully retrieved metadata: Instance ID: $INSTANCE_ID, Local IP: $LOCAL_IP"
                    break
                else
                    echo "Failed to get metadata on attempt $i, retrying in 5 seconds..."
                    sleep 5
                fi
            done
            
            # Fallback if metadata still not available
            if [[ -z "$INSTANCE_ID" ]]; then
                INSTANCE_ID="metadata-unavailable"
                echo "Warning: Could not retrieve instance ID from metadata service"
            fi
            
            if [[ -z "$LOCAL_IP" ]]; then
                LOCAL_IP="metadata-unavailable"
                echo "Warning: Could not retrieve local IP from metadata service"
            fi
            
            # Create health check endpoint as proper HTML
            echo "Creating health check endpoint..."
            cat > /var/www/html/health.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head><title>Health Check</title></head>
            <body><h1>OK</h1></body>
            </html>
            EOF
            
            # Create the main web page with dynamic content
            echo "Creating main web page..."
            cat > /var/www/html/index.php << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Auto Scaling Demo - Frankfurt</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        max-width: 800px;
                        margin: 0 auto;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        min-height: 100vh;
                    }
                    .container {
                        background: rgba(255, 255, 255, 0.1);
                        padding: 30px;
                        border-radius: 15px;
                        backdrop-filter: blur(10px);
                        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                        border: 1px solid rgba(255, 255, 255, 0.18);
                    }
                    h1 {
                        text-align: center;
                        margin-bottom: 30px;
                        font-size: 2.5em;
                        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                    }
                    .info-box {
                        background: rgba(255, 255, 255, 0.2);
                        padding: 20px;
                        margin: 20px 0;
                        border-radius: 10px;
                        border-left: 5px solid #4CAF50;
                    }
                    .stress-button {
                        background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
                        border: none;
                        color: white;
                        padding: 15px 30px;
                        font-size: 18px;
                        border-radius: 25px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                        display: block;
                        margin: 20px auto;
                    }
                    .stress-button:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 6px 20px rgba(0,0,0,0.3);
                    }
                    .stress-button:active {
                        transform: translateY(0);
                    }
                    .status {
                        text-align: center;
                        margin: 20px 0;
                        font-size: 16px;
                    }
                    #loadingSpinner {
                        display: none;
                        border: 4px solid rgba(255,255,255,0.3);
                        border-radius: 50%;
                        border-top: 4px solid white;
                        width: 40px;
                        height: 40px;
                        animation: spin 1s linear infinite;
                        margin: 20px auto;
                    }
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 Auto Scaling Demo - Frankfurt</h1>
            
                    <div class="info-box">
                        <h3>Instance Information:</h3>
                        <p><strong>Instance ID:</strong> <?php 
                            $instance_id = @file_get_contents('http://169.254.169.254/latest/meta-data/instance-id');
                            echo $instance_id ? $instance_id : 'Unable to fetch';
                        ?></p>
                        <p><strong>Private IP:</strong> <?php 
                            $private_ip = @file_get_contents('http://169.254.169.254/latest/meta-data/local-ipv4');
                            echo $private_ip ? $private_ip : 'Unable to fetch';
                        ?></p>
                        <p><strong>Region:</strong> eu-central-1 (Frankfurt)</p>
                        <p><strong>Timestamp:</strong> <span id="timestamp"></span></p>
                    </div>
            
                    <div class="info-box">
                        <h3>Auto Scaling Configuration:</h3>
                        <p><strong>Scale-out Trigger:</strong> CPU > 50%</p>
                        <p><strong>Min Instances:</strong> 1</p>
                        <p><strong>Max Instances:</strong> 3</p>
                    </div>
            
                    <button class="stress-button" onclick="stressCPU()">
                        🔥 Start CPU Stress Test
                    </button>
            
                    <div id="loadingSpinner"></div>
                    <div class="status" id="status"></div>
                </div>
            
                <script>
                    // Update timestamp
                    document.getElementById('timestamp').textContent = new Date().toLocaleString();
            
                    let stressActive = false;
            
                    function stressCPU() {
                        if (stressActive) {
                            return;
                        }
            
                        stressActive = true;
                        const button = document.querySelector('.stress-button');
                        const spinner = document.getElementById('loadingSpinner');
                        const status = document.getElementById('status');
            
                        button.textContent = '⏳ Running Stress Test...';
                        button.disabled = true;
                        spinner.style.display = 'block';
                        status.textContent = 'CPU stress test running for 5 minutes. Monitor CloudWatch for scaling events!';
            
                        fetch('/stress.php', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        })
                        .then(response => response.text())
                        .then(data => {
                            status.textContent = 'Stress test initiated successfully! Check Auto Scaling activity.';
                        })
                        .catch(error => {
                            status.textContent = 'Error starting stress test: ' + error;
                        })
                        .finally(() => {
                            setTimeout(() => {
                                button.textContent = '🔥 Start CPU Stress Test';
                                button.disabled = false;
                                spinner.style.display = 'none';
                                stressActive = false;
                                status.textContent = 'Stress test completed. Ready for next test.';
                            }, 300000); // 5 minutes
                        });
                    }
                </script>
            </body>
            </html>
            EOF
            
            # Create stress test endpoint
            echo "Creating stress test endpoint..."
            cat > /var/www/html/stress.php << 'EOF'
            <?php
            header('Content-Type: text/plain');
            
            if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                // Start CPU stress test in background (5 minutes)
                $command = 'nohup stress --cpu 2 --timeout 300s > /dev/null 2>&1 &';
                exec($command);
                echo "CPU stress test started for 5 minutes";
            } else {
                echo "Use POST method to start stress test";
            }
            ?>
            EOF
            
            # Set proper permissions
            chown -R apache:apache /var/www/html
            chmod -R 644 /var/www/html
            chmod 755 /var/www/html
            
            # Restart Apache to apply all changes
            echo "Restarting Apache..."
            systemctl restart httpd || signal_failure "Failed to restart Apache"
            
            # Verify Apache is still running after restart
            sleep 5
            if ! systemctl is-active --quiet httpd; then
                signal_failure "Apache failed after restart"
            fi
            
            # Test health endpoint
            echo "Testing health endpoint..."
            if ! curl -f http://localhost/health.html > /dev/null 2>&1; then
                signal_failure "Health check endpoint not responding"
            fi
            
            echo "User data script completed successfully at $(date)"
            
            # Signal CloudFormation success
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: AutoScaling-WebServer

  # IAM Role for EC2 instances with SSM access
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: AutoScaling-InstanceRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # Auto Scaling Group with improved settings
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoScaling-ASG
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      DesiredCapacity: 1
      MaxSize: 3
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AutoScaling-Instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  # CloudWatch Alarms
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AutoScaling-CPU-High
      AlarmDescription: Scale up when CPU exceeds 50%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AutoScaling-CPU-Low
      AlarmDescription: Scale down when CPU is below 25%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerURL'

  HealthCheckURL:
    Description: Health check endpoint URL
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/health.html'
    Export:
      Name: !Sub '${AWS::StackName}-HealthCheckURL'

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASG'

  TargetGroupArn:
    Description: Target Group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroup'